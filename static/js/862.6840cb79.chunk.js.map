{"version":3,"file":"static/js/862.6840cb79.chunk.js","mappings":"iMAEA,GAAeA,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,iEACD,a,yHCUW,SAASC,IACtB,IAAMC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MAEf,EC2GK,SAMLC,EACAC,EAGAC,GAEA,IAAMC,GAAgBC,EAAAA,EAAAA,IAAeJ,EAAMC,EAAMC,GACjD,OAAOG,EAAAA,EAAAA,GAAaF,EAAeG,EAAAA,EACpC,CDzH6BC,CAAS,CACnCC,SAAU,CAAC,cAAeZ,GAC1Ba,QAAS,kBAAMC,EAAAA,EAAAA,GAAed,EAAG,IAF3Be,EAAS,EAATA,UAAWC,EAAI,EAAJA,KASnB,OACE,8BACGD,GACC,SAACE,EAAA,EAAgB,KAEjB,SAACC,EAAA,EAAK,CAACC,UAAW,EAAGC,UAAU,eAAc,UAC3C,UAAC,IAAI,CAACC,WAAS,aACb,SAAC,IAAI,CAACC,GAAI,EAAE,UACV,SAACC,EAAA,EAAM,CAACC,WAAW,SAACC,EAAS,IAAKC,QAZ/B,WACbxB,GAAU,EACZ,EAU8D,SAAC,eAIrD,SAAC,IAAI,CAACoB,GAAI,KACV,SAAC,IAAI,CAACA,GAAI,EAAE,UACV,SAACK,EAAA,EAAS,CACRC,UAAU,MACVC,MAAOb,EAAKc,OACZC,IAAI,cACJC,GAAI,CAAEC,UAAW,IAAKC,UAAW,UAAWC,MAAO,aAGvD,UAAC,IAAI,CAACd,WAAS,EAACC,GAAI,EAAE,WACpB,SAAC,IAAI,CAACA,GAAI,GAAG,UACX,SAACc,EAAA,EAAU,CAACC,QAAQ,KAAKC,QAAS,SAAS,SACxCtB,EAAKuB,WAGV,SAAC,IAAI,CAACjB,GAAI,GAAG,UACX,UAACc,EAAA,EAAU,CAACC,QAAQ,YAAYC,QAAS,SAAS,UAAC,aACtCtB,EAAKwB,UAChB,kBAAM,WACGxB,EAAKyB,QACd,kBAAM,WACGzB,EAAK0B,aAGlB,SAAC,IAAI,CAACpB,GAAI,GAAG,UACX,UAACc,EAAA,EAAU,CAACC,QAAQ,UAAUC,QAAS,SAAS,UAAC,aACpCtB,EAAK2B,SAAS,KAAC,kBAAM,UACxB3B,EAAK4B,OACb,kBAAM,YACI5B,EAAK6B,SACf,kBAAM,UACE7B,EAAK8B,OACb,kBAAM,WACG9B,EAAK+B,QACd,kBACC/B,EAAKgC,QAAQC,KAAI,SAACC,GAAM,OACvB,4BACGA,EAAOC,OAAO,KAAGD,EAAOE,OACzB,oBAFSF,EAAOC,OAGX,UAKb,SAAC,IAAI,CAACE,GAAI,GAAG,UACX,UAACjB,EAAA,EAAU,CAACC,QAAQ,QAAQiB,cAAY,YAAC,SAChCtC,EAAKuC,mBAS9B,C,gHE9FaC,EAAe,SAACC,EAAYC,GACvC,MAAM,0CAAN,OAAiDD,EAAU,iBAASC,EACtE,EAEaC,EAAoB,SAACC,GAChC,MAAM,0CAAN,OAAiDA,EAAO,aAC1D,ECHaC,EAAS,yCAAG,WAAOJ,EAAYK,GAAS,sFACtCC,EAAAA,EAAAA,IAAUP,EAAaC,EAAYK,IAAY,KAAD,8EAC5D,gBAFqB,wCAIThD,EAAc,yCAAG,WAAO8C,GAAO,4FACvBG,EAAAA,EAAAA,IAAUJ,EAAkBC,IAAU,KAAD,EAA9C,OAANI,EAAM,yBACHA,EAAOhD,MAAI,2CACnB,gBAH0B,qC","sources":["../node_modules/@mui/icons-material/esm/ArrowBack.js","Pages/DetailPage.jsx","../node_modules/@tanstack/react-query/src/useQuery.ts","utils/urls.js","utils/requests.js"],"sourcesContent":["import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"\n}), 'ArrowBack');","import { ArrowBack } from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  CardMedia,\r\n  CircularProgress,\r\n  Paper,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport Grid from \"@mui/material/Unstable_Grid2\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport React from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { getMovieDetail } from \"utils/requests\";\r\n\r\nexport default function DetailPage() {\r\n  let { id } = useParams();\r\n  let navigate = useNavigate();\r\n\r\n  const { isLoading, data } = useQuery({\r\n    queryKey: [\"movieDetail\", id],\r\n    queryFn: () => getMovieDetail(id),\r\n  });\r\n\r\n  const goBack = () => {\r\n    navigate(-1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <Paper elevation={5} className=\"detail-wrapp\">\r\n          <Grid container>\r\n            <Grid md={6}>\r\n              <Button startIcon={<ArrowBack />} onClick={goBack}>\r\n                Go back\r\n              </Button>\r\n            </Grid>\r\n            <Grid md={6}></Grid>\r\n            <Grid md={3}>\r\n              <CardMedia\r\n                component=\"img\"\r\n                image={data.Poster}\r\n                alt=\"movie image\"\r\n                sx={{ maxHeight: 500, objectFit: \"contain\", width: \"auto\" }}\r\n              />\r\n            </Grid>\r\n            <Grid container md={7}>\r\n              <Grid md={12}>\r\n                <Typography variant=\"h4\" display={\"inline\"}>\r\n                  {data.Title}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid md={12}>\r\n                <Typography variant=\"subtitle2\" display={\"inline\"}>\r\n                  Director: {data.Director}\r\n                  <br />\r\n                  Writer: {data.Writer}\r\n                  <br />\r\n                  Actors: {data.Actors}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid md={12}>\r\n                <Typography variant=\"caption\" display={\"inline\"}>\r\n                  Released: {data.Released} <br />\r\n                  Rated: {data.Rated}\r\n                  <br />\r\n                  Runtime: {data.Runtime}\r\n                  <br />\r\n                  Genre: {data.Genre}\r\n                  <br />\r\n                  Awards: {data.Awards}\r\n                  <br />\r\n                  {data.Ratings.map((rating) => (\r\n                    <span key={rating.Source}>\r\n                      {rating.Source}: {rating.Value}\r\n                      <br />\r\n                    </span>\r\n                  ))}\r\n                </Typography>\r\n              </Grid>\r\n\r\n              <Grid lg={12}>\r\n                <Typography variant=\"body1\" gutterBottom>\r\n                  Plot: {data.Plot}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import type { QueryFunction, QueryKey } from '@tanstack/query-core'\nimport { parseQueryArgs, QueryObserver } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n","export const getMoviesUrl = (searchText, pageNumber) => {\r\n  return `https://omdbapi.com/?apikey=da981403&s=${searchText}&page=${pageNumber}`;\r\n};\r\n\r\nexport const getMovieDetailUrl = (movieId) => {\r\n  return `https://omdbapi.com/?apikey=da981403&i=${movieId}&plot=full`;\r\n};\r\n","import axios from \"axios\";\r\nimport { getMovieDetailUrl, getMoviesUrl } from \"./urls\";\r\n\r\nexport const getMovies = async (searchText, pageParam) => {\r\n  return await axios.get(getMoviesUrl(searchText, pageParam));\r\n};\r\n\r\nexport const getMovieDetail = async (movieId) => {\r\n  let result = await axios.get(getMovieDetailUrl(movieId));\r\n  return result.data;\r\n};\r\n"],"names":["createSvgIcon","_jsx","d","DetailPage","id","useParams","navigate","useNavigate","arg1","arg2","arg3","parsedOptions","parseQueryArgs","useBaseQuery","QueryObserver","useQuery","queryKey","queryFn","getMovieDetail","isLoading","data","CircularProgress","Paper","elevation","className","container","md","Button","startIcon","ArrowBack","onClick","CardMedia","component","image","Poster","alt","sx","maxHeight","objectFit","width","Typography","variant","display","Title","Director","Writer","Actors","Released","Rated","Runtime","Genre","Awards","Ratings","map","rating","Source","Value","lg","gutterBottom","Plot","getMoviesUrl","searchText","pageNumber","getMovieDetailUrl","movieId","getMovies","pageParam","axios","result"],"sourceRoot":""}